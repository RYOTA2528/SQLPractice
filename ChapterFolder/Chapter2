
(代表的なビッグデータの処理ツール)																									
①PostgreSQL																									
・オープンソースのRDBです。標準SQLへの準拠率が高い。ウィンドウ関数やCTEなど、分析に必須となる関数が多く収容されてる。																									
・特有の拡張機能が多く実装されてる。																									
・小規模な分析やSQL学習を目的とする利用に最適。ローカルで比較的軽量で動作するPostgreSQLの使用がおすすめ

②Apache Hive																									
・HDFSと呼ばれる分散ファイルシステム上のデータを、SQLライクなインターフェースで簡単に処理できる																									
・バラバラに配置されたデータを並列に処理する手法はMapReduce																									
・HDFSとMapReduceのアーキテクチャを実装したシステムが初期のApache Hadoop、HiveはHadoopエコシステムの一部																									
・（デメリット）	
　           　・PostgreSQLと比較するとあくまでファイルベースのシステムある。特定レコードだけの更新・削除は難しく、インデックスも基本的には存在しない。クエリ発行時にファイル全件を走査することになる。																								
	             ・あくまでもスループットを高めるためのものであるためレイテンシの低い処理を求められるケースにむいてない。																								
・（メリット）
               ・クエリ実行時に動的にデータの定義を与えられる。(ex)『Japan Tokyo Minato-ku』のデータに対して、『国・都道府県・市区町村』の3つのカラムデータとして取り扱うのではでなく、1つのとして扱うことが可能です。これにより『具体的に何に使うかわからないがとりあえず保存しておきたいデータ』をHDFS上に蓄積し、必要になったタイミングに応じて、動的にスキーマに定義できる																								
	             ・データ分析のための豊富なUDFを活用でき、SQLだけでは実現が難しい文字列処理なども簡単に実現できる。→Javaで実装可能！	
	
③Amazon Redshift	　																								
・AWSで提供される並列RDS																									
・行単位での更新・削除も可能。																									
（メリット）	・RDBでは扱えない大量データに対して、インタラクティブにクエリを発行したい場合に効果的。HiveではMapReduceによる分散処理を実行する場合、どんな軽いジョブでも10秒以上かかる。Redshiftでは最短数ミリ秒で実行可能。																								
	　　　　　　・利用時間に応じて課金される。																								
（デメリット）	
　　　　　　　・パフォーマンスチューニングや金額を抑えたい運用を行いたい場合、最適なノード数やノードスペックの見積もり、インスタンスの起動・終了の管理などが必要となりある程度の専門的な知識が必要となる。																								
	            ・PostgreSQLとのアーキテクチャ的な違いとして、Redshiftは列指向のストレージ（レコードごとではなく列ごとに保存）である点が特徴的であり、テーブル設計やクエリ実行時に通常のRDBとは異なる発想も必要になる。																								
	            ・このアーキテクチャによりデータ圧縮率を向上させたり、クエリ実行時にディスクI/Oを削除できます。																								
              ・分析に必要なデータを全て一つのテーブル列に追加する形式をとるケースも多々あり、クエリ実行の際『SELECT*』などの全ての列を取得するクエリはパフォーマンスを低下させることにつながるため
  　             必ず、『必要な列に絞って』クエリ実行する必要がある。
  　
④Google BigQuery
・ビッグデータ解析のためのGoogle上のクラウドサービス。
・SQLライクなクエリ言語。主に使用するのが『スタンダードSQL』で、CTEや相関サブクエリに対応するなど、一般的な構文でクエリを記述可能となっています。
（メリット）・Redshiftと違い、自分で計算ノードのインスタンスを管理する必要がなく、利用時間ではなく読み込むだデータ量で課金される点が特徴的。
　　　　　　・有料版GoogleAnlticsのデータをBigQueryで取り扱い可能であり、Google Cloud Storagesから手軽にデータをロードできるなど、他のサービスとの親和性が高い。
(デメリット)
　　　　　　・読み込んだデータ量で課金される
　　　　　　・データをロードする必要がある場合には、データ量に応じた金額が発生するため、クエリ発行時のデータを抑えるため、一緒に読み込まれやすいデータの範囲ごとに
　　　　　　　テーブルを分割する、必要なカラムだけ選択してSELECTするなどテクニカルが必要。
　　　　　　・列指向のアーキテクチャです。
　　　　　　
⑤SparkSQL
・MapReduceに続く分散処理フレームワークであるApacha Sparkの機能の内、SQLインターフェースをに関連する機能を表す言葉。
・オープンソースのフレームワークである為、無料で利用できる。非常に速い。機械学習やグラフ処理、リアルタイムストリーミング処理など、さまざまな処理を手軽に分散処理できる機能を提供。
（メリット）
						・ビッグデータ活用に関連するほとんどの処理をオールインワンで実現できる。
						・SparkはインターフェースとしてSQLだけでなく、PythonやScala、Java、Rなどのプログラミング言語に対応。データのインポートやエクスポート機能も豊富にジッソyされてる。